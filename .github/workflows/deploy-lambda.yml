name: Deploy AWS Lambda with Terraform
on:
  push:
    branches:
      - main
jobs:
  deploy:
    runs-on: ubuntu-latest
    env:
      AWS_REGION: ap-south-1
      TF_WORKING_DIR: terraform
    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Set up Go
      uses: actions/setup-go@v3
      with:
        go-version: "1.21"

    - name: Initialize Go module and download dependencies
      run: |
        echo "module contact-form-lambda" > go.mod
        echo "" >> go.mod
        echo "go 1.21" >> go.mod
        echo "" >> go.mod
        echo "require github.com/aws/aws-lambda-go v1.47.0" >> go.mod
        go mod tidy

    - name: Install Terraform
      uses: hashicorp/setup-terraform@v2
      with:
        terraform_version: "1.5.0"

    - name: Build Go binary for Lambda
      run: |
        GOOS=linux GOARCH=amd64 CGO_ENABLED=0 go build -tags lambda.norpc -o bootstrap main.go
        zip terraform/lambda.zip bootstrap
        
    - name: Set up AWS credentials
      uses: aws-actions/configure-aws-credentials@v2
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Initialize Terraform
      working-directory: ${{ env.TF_WORKING_DIR }}
      run: terraform init

    - name: Apply Terraform Plan
      working-directory: ${{ env.TF_WORKING_DIR }}
      env:
        TF_VAR_smtp_email: ${{ secrets.SMTP_EMAIL }}
        TF_VAR_smtp_password: ${{ secrets.SMTP_PASSWORD }}
        TF_VAR_aws_region: ${{ env.AWS_REGION }}
      run: |
        terraform plan -out=tfplan
        terraform apply -auto-approve tfplan

    - name: Cleanup build artifacts
      if: always()
      run: |
        rm -f terraform/lambda.zip bootstrap
